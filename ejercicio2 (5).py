# -*- coding: utf-8 -*-
"""EJERCICIO2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Hy0B0Haui8Nsk72uRtg6jBg9r2WOrH4o
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

# Función dada
def f(x):
    return np.exp(x)  # Nueva función

# Derivada analítica
def df_analytical(x):
    return np.exp(x)  # Nueva derivada analítica

# Métodos de diferenciación

def forward_diff(f, x, h=0.05):
    return (f(x + h) - f(x)) / h

def backward_diff(f, x, h=0.05):
    return (f(x) - f(x - h)) / h

def central_diff(f, x, h=0.05):
    return (f(x + h) - f(x - h)) / (2*h)

# Parámetros
a = 0.0
b = 2.0  # Nuevo intervalo
h = 0.05
x_vals = np.arange(a, b, h)  # Se ajusta el rango

# Cálculo de derivadas

df_exact = df_analytical(x_vals)
df_forward = forward_diff(f, x_vals, h)
df_backward = backward_diff(f, x_vals, h)
df_central = central_diff(f, x_vals, h)

# Errores
error_forward = np.abs(df_forward - df_exact)
error_backward = np.abs(df_backward - df_exact)
error_central = np.abs(df_central - df_exact)

# Crear tabla de valores
data = {
    'x': x_vals,
    'f(x)': f(x_vals),
    "f'(x) Analítica": df_exact,
    "f'(x) Adelante": df_forward,
    "f'(x) Atrás": df_backward,
    "f'(x) Centrada": df_central,
    "Error Adelante": error_forward,
    "Error Atrás": error_backward,
    "Error Centrada": error_central
}
df_table = pd.DataFrame(data)
print(df_table.to_string(index=False))

# Guardar la tabla en un archivo Excel
df_table.to_excel("diferenciacion_numerica.xlsx", index=False)

# Graficar funciones y aproximaciones
plt.figure(figsize=(10, 6))
plt.plot(x_vals, f(x_vals), '-', label='Funcion')
plt.plot(x_vals, df_exact, 'k-', label='Derivada Exacta')
plt.plot(x_vals, df_forward, 'r--', label='Hacia adelante')
plt.plot(x_vals, df_backward, 'g-.', label='Hacia atrás')
plt.plot(x_vals, df_central, 'b:', label='Centrada')
plt.xlabel('x')
plt.ylabel('Derivada')
plt.legend()
plt.title('Comparación de Métodos de Diferenciación Numérica')
plt.grid()
plt.savefig('diferenciacion_aproximaciones.png')
plt.show()

# Graficar errores
plt.figure(figsize=(10, 6))
plt.plot(x_vals, error_forward, 'r--', label='Error Hacia adelante')
plt.plot(x_vals, error_backward, 'g-.', label='Error Hacia atrás')
plt.plot(x_vals, error_central, 'b:', label='Error Centrada')
plt.xlabel('x')
plt.ylabel('Error absoluto')
plt.legend()
plt.title('Errores en Diferenciación Numérica')
plt.grid()
plt.savefig('diferenciacion_errores.png')
plt.show()